# -*- coding: utf-8 -*-
"""Terapan_Pertama.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16JoppGZZDsYQnPQHKO6hi8K-Mxr4DVWW

# Proyek Machine Learning Terapan Pertama
*   Nama    : Akh. Faris Farhan Zaima
*   SIB ID : M302X0784
*   Email  : m302x0784@dicoding.org
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from sklearn.preprocessing import StandardScaler

"""#Data Load"""

#Load dataset
data = pd.read_csv('Clean_Dataset.csv')
data.head()

#countplot source city
sns.countplot(data.source_city)

#countplot destination city
sns.countplot(data.destination_city	)

#countplot departure time
sns.countplot(data.departure_time)

#countplot stop(perhentian)
sns.countplot(data.stops)

#countplot arrivel time
sns.countplot(data.arrival_time)

"""Dari semua data yang categorical, tidak ditemukan adanya kejanggalan data."""

#bentuk data
data.shape

#Visualisasi days left terhadap price
sns.lineplot(data=data,x='days_left',y='price',color='green')
plt.title('Days Left vs Price',fontsize=12)
plt.xlabel('Days Left for Departure',fontsize=12)
plt.ylabel('Price',fontsize=12)
plt.show()

#Visuasliasi price
sns.histplot(x = 'price', data = data)
plt.xlabel('Price',fontsize=12)
plt.ylabel('Count',fontsize=12)

#Visualisasi price dengan airlines
plt.figure(figsize=(12,8))
sns.countplot(data.airline, palette='cool');

#Visualisasi data airlines dengan pie
plt.figure(figsize=(12,10))
data['airline'].value_counts().plot(kind='pie',textprops={'color':'black', 'fontsize': 20},autopct='%.2f',cmap='tab10', shadow=True)
plt.title('Presentation of Airlines',fontsize=20)
plt.legend(['SpiceJet', 'AirAsia', 'Vistara', 'GO_FIRST', 'Indigo','Air_India'])
plt.show()

"""#Exploratory Data Analysis
##Deskripsi Variabel
"""

#Menampilkan informasi tentang tipe data pada fitur
data.info()

#Melihat informasi jumlah, mean, dll dari fungsi describe
data.describe()

"""##Menangani Missing Value
###NaN value
"""

#Cek Nan dan Hapus
data.isna().sum()
data=data.dropna()
data

"""###Outlier"""

#cek outlier
sns.boxplot(data.duration)

#Boxplot data numerik harga
sns.boxplot(data.price)

#Metode IQR untuk melakukan drop data outlier
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR=Q3-Q1
data=data[~((data<(Q1-1.5*IQR))|(data>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
data.shape

#drop column yang tidak dibutuhkan
data=data.drop(['Unnamed: 0','flight','class'],axis=1)
data

"""##Univariate Analysis"""

#Definisi feature
numerical_features = ['duration','days_left','price']
categorical_features = ['airline','source_city','departure_time','stops','arrival_time','destination_city']

"""##Multivariate Analysis"""

#Pairplot untuk melihat hubungan antar fitur
sns.pairplot(data)

#Histogram untuk melihat hubungan antar fitur
data.hist(figsize=(12,8))

#Correlation untuk melihat hubungan antar fitur

plt.figure(figsize=(10, 8))
correlation_matrix = data.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

#Fungsi Corelation
data.corr()

"""#Data Preparation
##LabelEncoder
"""

#Encoder unutk mengubah data label menjadi numerk
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data["airline"] = le.fit_transform(data["airline"])
data["source_city"] = le.fit_transform(data["source_city"])
data["departure_time"] = le.fit_transform(data["departure_time"])
data["stops"] = le.fit_transform(data["stops"])
data["arrival_time"] = le.fit_transform(data["arrival_time"])
data["destination_city"] = le.fit_transform(data["destination_city"])
data

"""##Split Train and Test"""

from sklearn.model_selection import train_test_split
 
X = data.drop(["price"],axis =1)
y = data["price"]
#Membagi dataset dengan perbandingan 80:20
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.20, random_state = 42)

"""##Standard Scaller"""

#SCaller utnuk mengubah data dalam skala mendekati distribusi normal
scaler = StandardScaler()
numerical_features = ['duration','days_left']
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""#Model Development"""

#Definisi models sebagai array
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""##KNN"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 #KNN
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""##Random Forest"""

from sklearn.ensemble import RandomForestRegressor
#RF
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""##AdaBoost"""

from sklearn.ensemble import AdaBoostRegressor
 
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""#Evaluation Model"""

# Scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
# Panggil mse
mse

#Visualisasi besar Error
fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
plt.title("besar Error")
ax.grid(zorder=0)

#Hasil prediksi
prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)